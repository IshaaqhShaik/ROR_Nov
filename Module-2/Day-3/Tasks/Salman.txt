->Equal To(==):
    Operator checks whether the two given operands are equal or not. If so, it returns true. Otherwise it returns false.
    For example, 5==5 will return true.

->Not Equal To(!=):
    Operator checks whether the two given operands are equal or not. If not, it returns true.
    Otherwise it returns false. It is the exact boolean complement of the ‘==’ operator.
    EX: 5!=5 will return false.

->Greater Than(>):
    Operator checks whether the first operand is greater than the second operand. If so, it returns true.Otherwise it returns false.
    EX: 6>5 will return true.

->Less than(<):
    Operator checks whether the first operand is lesser than the second operand. If so, it returns true. Otherwise it returns false.
    EX: 6<5 will return false.

->Greater Than Equal To(>=):
    Operator checks whether the first operand is greater than or equal to the second operand. If so, it returns true. Otherwise it returns false.
    EX: 5>=5 will return true.

->Less Than Equal To(<=):
    Operator checks whether the first operand is lesser than or equal to the second operand. If so, it returns true. Otherwise it returns false.
    EX: 5<=5 will also return true.


3.Logical Operators
    They are used to combine two or more conditions/constraints or to complement the evaluation of the original condition in consideration
 
->Logical AND(&&):
    Operator returns true when both the conditions in consideration are satisfied. Otherwise it returns false.Using “and” is an alternate for && operator.
    EX: a && b returns true when both a and b are true.

->Logical OR(||):
    Operator returns true when one (or both) of the conditions in consideration is satisfied. Otherwise it returns false. Using “or” is an alternate for || operator.
    EX: a || b returns true if one of a or b is true. it returns true when both a and b are true.

->Logical NOT(!):
    Operator returns true the condition in consideration is not satisfied. Otherwise it returns false. Using “not” is an alternate for ! operator.
    EX: !true returns false.
Ruby Operators
    An operator is a symbol that represents an operation to be performed with one or more operand.
    Operators are the foundation of any programming language. Operators allow us to perform different kinds of operations on operands.
    
There are different types of operators used in Ruby as follows: 
 
1.Arithmetic Operators
2.Comparison Operators
3.Logical Operator

1.Arithmetic Operators
    These are used to perform arithmetic/mathematical operations on operands.

->Addition(+):
    Operator adds two operands.
    For example, x+y.

->Subtraction(-):
    Operator subtracts two operands.
    For example, x-y.
    
->Multiplication(*):
    Operator multiplies two operands.
    For example, x*y.

->Division(/):
    Operator divides the first operand by the second.
    For example, x/y.

2.Comparison Operators
    Comparison operators or Relational operators are used for comparison of two values.
 