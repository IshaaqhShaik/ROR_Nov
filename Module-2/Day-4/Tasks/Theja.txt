Decision Making statements:
    Decision Making in programming is similar to decision making in real life.In programming too,
    a certain block of code needs to be executed when some condition is fulfilled.
    
    1.if statement
    2.if-else statement
    3.if-else-if statement
    4.ternary statement

1.if statement:
    It is used to decide whether a certain statement or block of statements will be executed or not.
    if a certain condition is true then a block of statement is executed otherwise not.
    
    Syntax:

if (condition) 
 
     # statements to be executed 
 
end

2.if – else Statement:
    In this ‘if’ statement used to execute block of code when the condition is true and ‘else’ statement is used to
    execute a block of code when the condition is false.

    Syntax:  

if(condition)  

    # code if the condition is true  

else  

   # code if the condition is false  
end  

3.If – elsif – else Statement:
    One of the conditions controlling the ‘if’ is true, the statement associated with that ‘if’ is executed, and the rest of the ladder is bypassed.
    If none of the conditions is true, then the final else statement will be executed.

Syntax:

if(condition1)  

# code to be executed if condition1is true
  
elsif(condition2)
  
# code to be executed if condition2 is true  

else(condition3)  

# code to be executed if condition3 is true  
end  

4.Ternary Statement
    In Ruby ternary statement is also termed as the shortened if statement. It will first evaluate the expression for true or false value and then execute one of the statements.
    If the expression is true, then the true statement is executed else false statement will get executed.

Syntax: 

test-expression ? if-true-expression : if-false-expression 

Case Statement:
The case statement is a multiway branch statement just like a switch statement in other languages.
It provides an easy way to forward execution to different parts of code based on the value of the expression.

There are 3 important keywords which are used in the case statement:

->case: 
It is similar to the switch keyword in another programming languages. It takes the variables that will be used by when keyword.

->when: 
It is similar to the case keyword in another programming languages. It is used to match a single condition. There can be multiple when statements into a single case statement.

->else: 
It is similar to the default keyword in another programming languages. It is optional and will execute when nothing matches.

Syntax:

case expression

when expression 1
  # your code

when expression 2
  # your code
.
.

else
  # your code
end

 
Loops:
    Looping is a fundamental concept in programming that allows for the repeated execution of a block of code based on a condition.
    Ruby, being a flexible and dynamic language, provides various types of loops that can be used to handle condition-based iterations.
    These loops simplify tasks that require repetitive actions in a program.

The main types of loops in Ruby are:

    1. while Loop
    2. for Loop
    3. do..while Loop
    4. until Loop

1.while Loop
    The Ruby while loop is used to iterate a program several times. If the number of iterations is not fixed for a program, while loop is used.
    Ruby while loop executes a condition while a condition is true. Once the condition becomes false, while loop stops its execution.
Syntax:

while conditional [do]
 # code to be executed
end

2.for Loop:
    for loop iterates over a specific range of numbers. Hence, for loop is used if a program has fixed number of iterations.
    for loop will execute once for each element in expression.
Syntax:

for variable_name[, variable...] in expression [do]

   # code to be executed

end

Components:
    ->for: A keyword that begins the loop.
    ->variable_name: The loop variable that iterates over values.
    ->in: A keyword used to specify the range or array to iterate over.
    ->expression: Defines the range, array, or collection.
    ->do: (optional) Indicates the beginning of the loop body.
    ->end: Marks the end of the loop

3.do..while Loop:
   The Ruby do while loop iterates a part of program several times. It is quite similar to a while loop with the only difference
   that loop will execute at least once.It is due to the fact that in do while loop, condition is written at the end of the code.

Syntax:
loop do

 # code to be executed

break if Boolean_Expression

end

4.until Loop:
    until loop will executes the statements or code till the given condition evaluates to true. 
    Basically it's just opposite to the while loop which executes until the given condition evaluates to false.

Syntax: 
until conditional [do]

 # code to be executed

end